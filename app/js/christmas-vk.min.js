(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _christmas_vk = _interopRequireDefault(require("./modules/christmas_vk"));

var _christmas_style = require("./modules/christmas_style");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Импорт главного класса
// Импорт стилей
// Запуск
// Чтобы не грузилось в iframe
if (window.top === window) {
  requestAnimationFrame(function launch() {
    if (!document.querySelector('.head_nav_btns')) {
      console.log('Шапки еще нет');
      requestAnimationFrame(launch);
    } else {
      console.log('%c%s', window.log_color ? window.log_color.purple : '', '*Christmas lights* Запуск рабочего скрипта');
      window.christmasLights = new _christmas_vk.default({
        // Количество фонариков
        amount: 50,
        // Максимальное отклонение от центральной позиции
        deviation: 30,
        // В какой блок вставлять (альфа, сейчас глючит все, кроме body)
        parent: 'body',
        // Инъекция стилей (не трогать)
        style_content: _christmas_style.christmas_style_vk
      });
    }
  });
}

},{"./modules/christmas_style":3,"./modules/christmas_vk":4}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/* Christmas lights */
var ChristmasLights =
/*#__PURE__*/
function () {
  function ChristmasLights() {
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ChristmasLights);

    // Классы для цветов фонариков
    this.color_classes = {
      red: 'christmas-item_red',
      yellow: 'christmas-item_yellow',
      green: 'christmas-item_green',
      blue: 'christmas-item_blue'
    }; // Общее количество фонариков

    this.amount = settings.amount || 40; // Количество фонариков каждого цвета

    this.color_amount = {}; // Максимальное отклонение фонариков от базовой позиции

    this.deviation = settings.deviation || 10; // Селектор блока, в котором будет создаваться контейнер

    this.parent = document.querySelector(settings.parent) || document.querySelector('body'); // Переменная, содержащая в себе текстовый контент стилей

    this.style_content = settings.style_content; // Контейнер, в котором будут создаваться фонарики

    this.container = document.createElement('div'); // Размеры контейнера

    this.container_size = {
      x: 0,
      y: 0 // Массив созданных элементов-фонариков

    };
    this.buffer = []; // Флаг паузы движения

    this.pause_run = false; // Флаг запущенной анимации мерцания

    this.init_animation = true; // Флаг показа фонариков

    this.show = true; // Точка входа

    this.init();
  } // Возвращает рандомное число в указанных границах


  _createClass(ChristmasLights, [{
    key: "rand",
    value: function rand(min, max) {
      var rand = Math.floor(min + Math.random() * (max + 1 - min));

      if (rand === 0) {
        rand++;
      }

      return rand;
    } // Вставка стилей внутрь контейнера

  }, {
    key: "styleInject",
    value: function styleInject(style_content, elem, id) {
      var stl = document.createElement('style');
      stl.id = id;
      stl.textContent = style_content;
      elem.appendChild(stl);
    } // Установка нового количества фонариков

  }, {
    key: "setAmount",
    value: function setAmount(new_amount) {
      new_amount = new_amount < 0 ? 0 : new_amount;
      new_amount = new_amount > 1000 ? 1000 : new_amount;
      this.amount = +new_amount;
      this.computeAmount(this.amount);
      this.itemsRemover();
      this.itemsReGen();
    } // Вкл/выкл анимации мерцания

  }, {
    key: "toggleAnimation",
    value: function toggleAnimation(flag) {
      var _this = this;

      if (typeof flag === 'boolean') {
        this.init_animation = flag;
      } else {
        this.init_animation = !this.init_animation;
      }

      if (this.init_animation) {
        this.buffer.forEach(function (item) {
          return _this.initAnimation(item);
        });
        return 'Run';
      } else {
        this.buffer.forEach(function (item) {
          return _this.removeAnimation(item);
        });
        return 'Pause';
      }
    } // Удалить анимацию мерцания

  }, {
    key: "removeAnimation",
    value: function removeAnimation(item) {
      requestAnimationFrame(function () {
        return item.elem.classList.remove('christmas-item-anim');
      });
      this.init_animation = false;
    } // Добавить анимацию мерцания

  }, {
    key: "initAnimation",
    value: function initAnimation(item) {
      requestAnimationFrame(function () {
        return item.elem.classList.add('christmas-item-anim');
      });
      this.init_animation = true;
    } // Первый звпуск движения всех фонариков

  }, {
    key: "firstRun",
    value: function firstRun() {
      var _this2 = this;

      setTimeout(function () {
        _this2.buffer.forEach(function (item, index) {
          item.x = 0;
          item.y = 0;
          requestAnimationFrame(function () {
            return _this2.runItem(index);
          });
        });
      }, 100);
    } // Запускает движение фонарика

  }, {
    key: "runItem",
    value: function runItem(index) {
      var item = this.buffer[index];

      if (item) {
        var x = item.x + this.rand(-4, 4);
        var y = item.y + this.rand(-4, 4);
        x = x < 0 - this.deviation ? 0 : x > this.deviation ? 0 : x;
        y = y < 0 - this.deviation ? 0 : y > this.deviation ? 0 : y;
        this.buffer[index].x = x;
        this.buffer[index].y = y;
        var transform_duration = this.rand(1500, 2500);
        this.buffer[index].elem.style.transition = "transform ".concat(transform_duration, "ms ease-in-out, top ").concat(transform_duration, "ms ease-in-out, left ").concat(transform_duration, "ms ease-in-out");
        this.buffer[index].elem.style.transform = "translate3d(".concat(x, "px, ").concat(y, "px, 1px)");
      }
    } // Метод для остановки/возобновления движения фонариков

  }, {
    key: "pauseRun",
    value: function pauseRun(flag) {
      if (typeof flag === 'boolean') {
        this.pause_run = flag;
      } else {
        this.pause_run = !this.pause_run;
      }

      if (!this.pause_run) {
        this.firstRun();
        this.pause_run = false;
        return 'Run';
      }

      this.pause_run = true;
      return 'Pause';
    } // Инициализация движения фонариков и слушателя его окончания

  }, {
    key: "initRun",
    value: function initRun() {
      var _this3 = this;

      this.container.addEventListener('transitionend', function (e) {
        if (e.propertyName === 'transform' && !_this3.pause_run) {
          // console.log(e.propertyName);
          _this3.runItem(Number(e.target.dataset.christmasItem));
        }
      });
    } // Меняет положение всех фонариков

  }, {
    key: "updatePosition",
    value: function updatePosition() {
      var _this4 = this;

      this.container_size.x = window.innerWidth;
      this.container_size.y = window.innerHeight;
      this.buffer.forEach(function (item) {
        return _this4.setPosition(item);
      });
    } // Задает позицию фонарика

  }, {
    key: "setPosition",
    value: function setPosition(item) {
      var _this5 = this;

      requestAnimationFrame(function () {
        item.elem.style.top = _this5.rand(0 + 15, _this5.container_size.y - 15) + 'px';
        item.elem.style.left = _this5.rand(0 + 15, _this5.container_size.x - 15) + 'px';
      });
    } // Вставка фонарика в контейнер

  }, {
    key: "appendItem",
    value: function appendItem(elem) {
      var _this6 = this;

      requestAnimationFrame(function () {
        return _this6.container.appendChild(elem);
      });
    } // Генерация фонариков

  }, {
    key: "itemsGenerator",
    value: function itemsGenerator() {
      var item_index = 0;

      for (var color in this.color_amount) {
        var amount = this.color_amount[color];

        for (var i = 0; i < amount; i++) {
          var item = {
            x: 0,
            y: 0
          };
          var elem = document.createElement('div');
          elem.classList.add('christmas-item', this.color_classes[color]);
          elem.dataset.christmasItem = item_index;
          var transform_duration = this.rand(1500, 2500);
          elem.style.transition = "transform ".concat(transform_duration, "ms ease-in-out, top ").concat(transform_duration, "ms ease-in-out, left ").concat(transform_duration, "ms ease-in-out");
          item.elem = elem;
          this.setPosition(item);
          this.buffer[item_index] = item;
          this.appendItem(elem);
          item_index++;
        }
      }

      this.show = true;
    } // Удаляет все фонарики из контейнера

  }, {
    key: "itemsRemover",
    value: function itemsRemover() {
      var _this7 = this;

      this.buffer.forEach(function (item) {
        requestAnimationFrame(function () {
          return _this7.container.removeChild(item.elem);
        });
      });
      this.buffer = [];
      this.show = false;
    } // Заново генерирует фонарики после удаления

  }, {
    key: "itemsReGen",
    value: function itemsReGen() {
      if (this.show === false) {
        // Генерируем фонарики
        this.itemsGenerator(); // И запускаем первое движение

        if (!this.pause_run) {
          this.firstRun();
        } // Запускаем анимацию мерцания


        if (this.init_animation) {
          this.toggleAnimation(true);
        }

        return 'Generate';
      } else {
        this.itemsRemover();
        return 'Remove';
      }
    } // Расчет размеров контейнера

  }, {
    key: "computeContainerSize",
    value: function computeContainerSize() {
      this.container_size.x = window.innerWidth;
      this.container_size.y = window.innerHeight;
    } // Инициализация контейнера

  }, {
    key: "initContainer",
    value: function initContainer() {
      this.container.id = 'christmas-container';
      this.styleInject(this.style_content, this.container, 'christmas-style');
      this.parent.appendChild(this.container);
    } // Расчет количества фонариков каждого цвета

  }, {
    key: "computeAmount",
    value: function computeAmount(amount) {
      this.color_amount = {
        red: Math.floor(amount / 4),
        yellow: Math.floor(amount / 4),
        green: Math.floor(amount / 4),
        blue: amount - Math.floor(amount / 4) * 3
      };
    }
  }, {
    key: "init",
    value: function init() {
      this.computeAmount(this.amount);
      this.computeContainerSize();
      this.initContainer(); // Генерируем фонарики

      if (this.show) {
        this.itemsGenerator();
      } // После генерации всех фонариков вешаем на контейнер слушатель transitionend


      this.initRun(); // И запускаем первое движение

      if (!this.pause_run) {
        this.firstRun();
      } // Запускаем анимацию мерцания


      if (this.init_animation) {
        this.toggleAnimation(true);
      }
    }
  }]);

  return ChristmasLights;
}();

exports.default = ChristmasLights;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.christmas_style_page = exports.christmas_style_vk = exports.christmas_style = void 0;
// Стили для основного скрипта
var christmas_style = "\nbody {\n  position: relative;\n  min-width: 100%;\n  min-height: 100vh;\n  margin: 0;\n}\n\n#christmas-container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -9999;\n  overflow: hidden;\n}\n\n.christmas-item {\n  width: 10px;\n  height: 10px;\n  position: absolute;\n  will-change: transform, opacity;\n  border-radius: 50%;\n}\n\n.christmas-item_red {\n\n}\n\n.christmas-item_yellow {\n\n}\n\n.christmas-item_green {\n\n}\n\n.christmas-item_blue {\n\n}\n\n.christmas-item:before {\n  content: '';\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  width: 8px;\n  height: 8px;\n  top: 50%;\n  left: 50%;\n  will-change: transform, opacity;\n  transform: translate3d(-50%, -50%, 1px) scale(0);\n}\n\n.christmas-item:after {\n  content: '';\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  width: 10px;\n  height: 10px;\n  top: 50%;\n  left: 50%;\n  transform: translate3d(-50%, -50%, 1px);\n}\n\n.christmas-item_red:before {\n  /* #FA0C00 */\n  box-shadow: 0 0 20px 6px rgba(250, 12, 0, 1);\n  animation-delay: 0s;\n}\n\n.christmas-item_red:after {\n  background: #F32613;\n}\n\n.christmas-item_yellow:before {\n  /* #FAF200 */\n  box-shadow: 0 0 20px 6px rgba(250, 242, 0, .8);\n  animation-delay: .5s;\n}\n\n.christmas-item_yellow:after {\n  background: #F0F343;\n}\n\n.christmas-item_green:before {\n  /* #2AFA00 */\n  box-shadow: 0 0 20px 6px rgba(42, 250, 0, .8);\n  animation-delay: 1s;\n}\n\n.christmas-item_green:after {\n  background: #61F351;\n}\n\n.christmas-item_blue:before {\n  /* #23FFF4 */\n  box-shadow: 0 0 20px 8px rgba(35, 255, 244, .6);\n  animation-delay: 1.5s;\n}\n\n.christmas-item_blue:after {\n  background: #89f3ef;\n}\n\n.christmas-item-anim:before {\n  animation-name: christmas-item-anim;\n  animation-duration: 1.7s;\n  animation-timing-function: linear;\n  animation-iteration-count: infinite;\n}\n\n@keyframes christmas-item-anim {\n  0% {\n      transform: translate3d(-50%, -50%, 1px) scale(.6);\n      opacity: .7;\n  }\n  50% {\n      transform: translate3d(-50%, -50%, 1px) scale(.9);\n      opacity: 1;\n  }\n  100% {\n      transform: translate3d(-50%, -50%, 1px) scale(.6);\n      opacity: .7;\n  }\n}\n"; // Стили для запуска на странице ВК

exports.christmas_style = christmas_style;
var _style_vk = "\n.christmas-controls {\n  width: auto;\n  min-width: 36px;\n  float: left;\n  padding: 0 5px !important;\n  height: 42px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  position: relative;\n}\n\n.christmas_controls .ui_rmenu_item_sel:not(:hover) {\n  border-left: 2px solid transparent !important;\n  background-color: transparent !important;\n}\n\n.christmas_controls .cur_default {\n  cursor: default !important;\n}\n\n.christmas-controls .christmas_controls {\n  border: 1px solid #c5d0db;\n  background: #fff;\n  position: absolute;\n  opacity: 1;\n  left: 0px;\n  pointer-events: auto;\n  box-shadow: 0 0 7px 0px rgba(0, 0, 0, 0.3) !important;\n  user-select: none;\n\n  opacity: 0;\n  bottom: 0;\n  z-index: -99;\n  will-change: transform;\n  transform: translate3d(0, 0, 1px);\n  transition: transform .3s .3s ease-in-out, opacity .2s .3s !important;\n}\n\n.christmas-controls:hover .christmas_controls {\n  z-index: 1;\n\n  opacity: 1;\n  transform: translate3d(0, 100%, 1px);\n  transition: transform .3s .3s ease-in-out, opacity .2s .3s, z-index .1s .3s !important;\n}\n\n.christmas_controls .christmas_controls_content {\n  padding-top: 0;\n  padding-bottom: 0;\n  min-width: 235px;\n  max-height: inherit;\n  max-width: 300px;\n  overflow: visible !important;\n  width: auto!important;\n}\n.christmas_controls_content .content {\n  margin-bottom: -1px;\n}\n.christmas_controls_content .line_cell {\n  padding: 0 15px;\n  height: 48px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  cursor: pointer;\n}\n.line_cell .option_name {\n  flex-grow: 1;\n  text-decoration: none;\n}\n.christmas_controls_content .line_cell:hover,\n.christmas_controls_content .line_cell.selected {\n  background-color: #e4eaf0;\n}\n\n.tt_default.tt_up:before {\n  border-width: 6px;\n  margin: 0 -6px;\n  border-bottom-color: #c5d0db;\n}\n.tt_default.tt_up:after {\n  border-width: 5px;\n  margin: 0 -5px;\n  border-bottom-color: #fff;\n  transform: translate3d(0, 0.5px, 0);\n}\n.christmas_controls.tt_default.tt_up:after, \n.christmas_controls.tt_default.tt_up:before {\n  left: 24px;\n}\n.tt_w.tt_up:after, .tt_w.tt_up:before {\n  bottom: 100%;\n}\n.tt_w:after, .tt_w:before {\n  position: absolute;\n  pointer-events: none;\n  border: solid transparent;\n  content: '';\n  height: 0;\n  width: 0;\n}\n\n.christmas_controls input.text.ts_input {\n  padding: 6px 6px 6px 6px;\n  background-image: none !important;\n  width: 50px;\n  margin: 0 0 0 10px;\n  border: 1px solid #c5d0db;\n  text-align: center;\n}\n\n/* \u0410\u043D\u0438\u043C\u0430\u0446\u0438\u044F \"\u043A\u043D\u043E\u043F\u043A\u0438 \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\" */\n.controls_light {\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  position: relative;\n}\n.controls_light:before {\n  animation-name: christmas-item-anim, controls_light_shadow;\n  animation-duration: 1.7s, 8.5s;\n  animation-timing-function: linear;\n  animation-iteration-count: infinite;\n}\n.controls_light:after {\n  animation-name: controls_light_background;\n  animation-duration: 8.5s;\n  animation-timing-function: linear;\n  animation-iteration-count: infinite;\n}\n.controls_light:before {\n  content: '';\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  width: 8px;\n  height: 8px;\n  top: 50%;\n  left: 50%;\n  will-change: transform, opacity;\n  transform: translate3d(-50%, -50%, 1px) scale(0);\n}\n.controls_light:after {\n  content: '';\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  width: 10px;\n  height: 10px;\n  top: 50%;\n  left: 50%;\n  transform: translate3d(-50%, -50%, 1px);\n}\n@keyframes controls_light_background {\n  0% {\n    background-color: rgba(250, 12, 0, 1);\n  }\n  25% {\n    background-color: rgba(250, 242, 0, .8);\n  }\n  50% {\n    background-color: rgba(42, 250, 0, .8);\n  }\n  75% {\n    background-color: rgba(35, 255, 244, .6);\n  }\n  100% {\n    background-color: rgba(250, 12, 0, 1);\n  }\n}\n@keyframes controls_light_shadow {\n  0% {\n    box-shadow: 0 0 20px 6px rgba(250, 12, 0, 1);\n  }\n  25% {\n    box-shadow: 0 0 20px 6px rgba(250, 242, 0, .8);\n  }\n  50% {\n    box-shadow: 0 0 20px 6px rgba(42, 250, 0, .8);\n  }\n  75% {\n    box-shadow: 0 0 20px 8px rgba(35, 255, 244, .6);\n  }\n  100% {\n    box-shadow: 0 0 20px 6px rgba(250, 12, 0, 1);\n  }\n}\n";
var christmas_style_vk = christmas_style + _style_vk; // Стили для запуска на простой странице

exports.christmas_style_vk = christmas_style_vk;
var _style_page = "\nbody {\n  background-color: rgb(37, 48, 60);\n}\n\n.test {\n  width: 100%;\n  height: 50vh;\n  position: relative;\n}\n\n.btn_update {\n  position: fixed;\n  top: 0;\n  left: 0;\n  color: #ffc000;\n  padding: 15px 10px;\n  border: 1px solid #ffc000;\n  background-color: rgba(37, 48, 60, .7);\n  border-radius: 5px;\n  cursor: pointer;\n  z-index: 99;\n  user-select: none;\n}\n";
var christmas_style_page = christmas_style + _style_page;
exports.christmas_style_page = christmas_style_page;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _christmas_main = _interopRequireDefault(require("./christmas_main"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// Класс для работы на странице ВК
var ChristmasLightsVK =
/*#__PURE__*/
function (_ChristmasLights) {
  _inherits(ChristmasLightsVK, _ChristmasLights);

  function ChristmasLightsVK(param) {
    _classCallCheck(this, ChristmasLightsVK);

    return _possibleConstructorReturn(this, _getPrototypeOf(ChristmasLightsVK).call(this, param));
  } // Вызывает паузу движения и меняет текст в кнопке отключения движения


  _createClass(ChristmasLightsVK, [{
    key: "pauseRunHandler",
    value: function pauseRunHandler(e) {
      var res = this.pauseRun();
      var option_name = e.currentTarget.querySelector('.option_name');

      if (res === 'Pause') {
        option_name.textContent = 'Включить движение';
      } else if (res === 'Run') {
        option_name.textContent = 'Отключить движение';
      }

      this.Storage.set('pause_run', this.pause_run);
    } // Вызывает паузу анимации и меняет текст в кнопке

  }, {
    key: "toggleAnimationHandler",
    value: function toggleAnimationHandler(e) {
      var res = this.toggleAnimation();
      var option_name = e.currentTarget.querySelector('.option_name');

      if (res === 'Pause') {
        option_name.textContent = 'Включить мерцание';
      } else if (res === 'Run') {
        option_name.textContent = 'Отключить мерцание';
      }

      this.Storage.set('init_animation', this.init_animation);
    } // Вызывает удаление/генерацию фонариков и меняет текст в кнопке

  }, {
    key: "itemsReGenHandler",
    value: function itemsReGenHandler(e) {
      var res = this.itemsReGen();
      var option_name = e.currentTarget.querySelector('.option_name');

      if (res === 'Remove') {
        option_name.textContent = 'Показать фонарики';
      } else if (res === 'Generate') {
        option_name.textContent = 'Убрать фонарики';
      }

      this.Storage.set('show', this.show);
    }
  }, {
    key: "setAmountHandler",
    value: function setAmountHandler() {
      var new_amount = this._set_amount.value;
      this.setAmount(new_amount);
      this.Storage.set('amount', this.amount);
    }
  }, {
    key: "updateAmountInput",
    value: function updateAmountInput(amount) {
      this._set_amount.value = amount;
    } // Получает элементы управления

  }, {
    key: "getControlsElem",
    value: function getControlsElem(elem) {
      // Инпут с количеством фонариков
      this._set_amount = elem.querySelector('._set_amount input');
      this.updateAmountInput(this.amount); // Кнопка смены позиции

      this._change_pos = elem.querySelector('._change_pos'); // Кнопка движения

      this._pause_run = elem.querySelector('._pause_run');

      var _pause_run_text = this._pause_run.querySelector('.option_name');

      _pause_run_text.textContent = this.pause_run ? 'Включить движение' : 'Отключить движение'; // Кнопка анимации

      this._anim_toggle = elem.querySelector('._anim_toggle');

      var _anim_toggle_text = this._anim_toggle.querySelector('.option_name');

      _anim_toggle_text.textContent = this.init_animation ? 'Отключить мерцание' : 'Включить мерцание'; // Кнопка Убрать/Показать фонарики

      this._items_re_gen = elem.querySelector('._items_re_gen');

      var _items_re_gen_text = this._items_re_gen.querySelector('.option_name');

      _items_re_gen_text.textContent = this.show ? 'Убрать фонарики' : 'Показать фонарики';
    } // Вешает обработчики событий на элементы управления

  }, {
    key: "initControlsHandlers",
    value: function initControlsHandlers() {
      // Инпут с количеством фонариков
      this._set_amount.addEventListener('input', this.setAmountHandler.bind(this)); // Кнопка смены позиции


      this._change_pos.addEventListener('click', this.updatePosition.bind(this)); // Кнопка движения


      this._pause_run.addEventListener('click', this.pauseRunHandler.bind(this)); // Кнопка анимации


      this._anim_toggle.addEventListener('click', this.toggleAnimationHandler.bind(this)); // Кнопка Убрать/Показать фонарики


      this._items_re_gen.addEventListener('click', this.itemsReGenHandler.bind(this));
    } // Возвращает шаблон блока управления

  }, {
    key: "getTemplate",
    value: function getTemplate() {
      return "\n<div class=\"tt_w tt_default tt_up christmas_controls\">\n    <div class=\"wrapped\">\n        <div class=\"notify_sources_tt_content christmas_controls_content\">\n            <div class=\"content\">\n\n                <div class=\"line_cell clear_fix ui_rmenu_item_sel cur_default _set_amount\">\n                    <div class=\"option_name cur_default\">\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0444\u043E\u043D\u0430\u0440\u0438\u043A\u043E\u0432</div>\n                    <input class=\"text ts_input\"></input>\n                </div>\n\n                <div class=\"line_cell clear_fix ui_rmenu_item_sel _change_pos\">\n                  <a class=\"option_name\">\u0421\u043C\u0435\u043D\u0438\u0442\u044C \u043F\u043E\u0437\u0438\u0446\u0438\u044E</a>\n                </div>\n\n                <div class=\"line_cell clear_fix ui_rmenu_item_sel _pause_run\">\n                  <a class=\"option_name\">\u041E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0434\u0432\u0438\u0436\u0435\u043D\u0438\u0435</a>\n                </div>\n\n                <div class=\"line_cell clear_fix ui_rmenu_item_sel _anim_toggle\">\n                  <a class=\"option_name\">\u041E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043C\u0435\u0440\u0446\u0430\u043D\u0438\u0435</a>\n                </div>\n\n                <div class=\"line_cell clear_fix ui_rmenu_item_sel _items_re_gen\">\n                  <a class=\"option_name\">\u0423\u0431\u0440\u0430\u0442\u044C \u0444\u043E\u043D\u0430\u0440\u0438\u043A\u0438</a>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>";
    } // Создание блока управления

  }, {
    key: "initControls",
    value: function initControls() {
      var head_nav_btns = document.querySelector('.head_nav_btns');
      var top_notify_btn = document.querySelector('#top_notify_btn');

      if (head_nav_btns && top_notify_btn) {
        var christmas_controls = document.createElement('div');
        christmas_controls.classList.add('christmas-controls', 'top_nav_btn'); // christmas_controls.textContent = 'Дратути!';

        var controls_light = document.createElement('div');
        controls_light.classList.add('controls_light');
        christmas_controls.appendChild(controls_light);
        var christmas_controls_tt = document.createElement('div');
        christmas_controls_tt.innerHTML = this.getTemplate();
        christmas_controls.appendChild(christmas_controls_tt);
        this.getControlsElem(christmas_controls);
        this.initControlsHandlers(christmas_controls);
        head_nav_btns.insertBefore(christmas_controls, top_notify_btn);
      } else {
        console.log('%c%s', window.log_color ? window.log_color.red : '', '*Christmas lights* не удалось создать блок управления');
      }
    }
  }, {
    key: "initStorage",
    value: function initStorage(global_key) {
      if (localStorage.getItem('christmasLights') == null) {
        var start_obj = {
          amount: this.amount,
          pause_run: this.pause_run,
          init_animation: this.init_animation,
          show: this.show
        };
        localStorage.setItem(global_key, JSON.stringify(start_obj));
      }

      this.Storage = {
        set: function set(key, val) {
          var tmp = JSON.parse(localStorage.getItem(global_key));
          tmp[key] = val;
          localStorage.setItem(global_key, JSON.stringify(tmp));
          return tmp;
        },
        get: function get(key) {
          var tmp = JSON.parse(localStorage.getItem(global_key));
          return tmp[key];
        },
        remove: function remove(key) {
          var tmp = JSON.parse(localStorage.getItem(global_key));
          delete tmp[key];
          localStorage.setItem(global_key, JSON.stringify(tmp));
          return tmp;
        },
        clear: function clear() {
          localStorage.removeItem(global_key);
        }
      };
    }
  }, {
    key: "restoreSettings",
    value: function restoreSettings() {
      this.amount = this.Storage.get('amount');
      this.pause_run = this.Storage.get('pause_run');
      this.init_animation = this.Storage.get('init_animation');
      this.show = this.Storage.get('show');
      return {
        amount: this.amount,
        pause_run: this.pause_run,
        init_animation: this.init_animation,
        show: this.show
      };
    }
  }, {
    key: "init",
    value: function init() {
      this.initStorage('christmasLights');
      this.restoreSettings();

      _get(_getPrototypeOf(ChristmasLightsVK.prototype), "init", this).call(this); // Запуск создания блока управления


      this.initControls();
    }
  }]);

  return ChristmasLightsVK;
}(_christmas_main.default);

exports.default = ChristmasLightsVK;

},{"./christmas_main":2}]},{},[1])

//# sourceMappingURL=maps/christmas-vk.min.js.map
